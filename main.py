import telebot
from telebot import types
from database import db
from buttons import Keyboard
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ email
API_TOKEN = '7792092390:AAFR9KZDvsehIz03fkBeUp2Kb024tGrC3j4'
bot = telebot.TeleBot(API_TOKEN)

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = "camillakleymen@gmail.com"
EMAIL_HOST_PASSWORD = "zqrz tgqi zgpt yvyp"
EMAIL_RECIPIENT = "camillakleymen@gmail.com"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


def get_user_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        cursor = db.cursor
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone()
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None


def format_order_email(user_id, cart_items, total):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    user_info = get_user_info(user_id)
    if not user_info:
        return None

    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    message_text = f"""
    –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id}
    –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order_time}

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:
    - ID: {user_id}
    - –ò–º—è: {user_info[1]}
    - –¢–µ–ª–µ—Ñ–æ–Ω: {user_info[2]}

    –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
    """

    for item in cart_items:
        message_text += f"- {item[0]}: {item[1]} —à—Ç. √ó {item[2] / item[1]}—Å—É–º = {item[2]}—Å—É–º\n"

    message_text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}—Å—É–º"
    return message_text


def send_order_email(user_id, cart_items, total):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ"""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_HOST_USER
        msg['To'] = EMAIL_RECIPIENT
        msg['Subject'] = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id} –æ—Ç {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

        message_text = format_order_email(user_id, cart_items, total)
        if not message_text:
            logger.error(f"Failed to format email for user {user_id}")
            return False

        msg.attach(MIMEText(message_text, 'plain'))

        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
            server.send_message(msg)

        logger.info(f"Order email sent successfully for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to send order email: {e}")
        return False


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        if not db.check_user(user_id):
            bot.send_message(
                message.chat.id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            bot.register_next_step_handler(message, get_name)
        else:
            show_main_menu(message.chat.id)
    except Exception as e:
        logger.error(f"Start error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_states[message.from_user.id] = {'name': message.text}
        bot.send_message(
            message.chat.id,
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=Keyboard.get_phone_number()
        )
        bot.register_next_step_handler(message, get_phone)
    except Exception as e:
        logger.error(f"Get name error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")


def get_phone(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        user_id = message.from_user.id

        if message.contact is not None:
            phone = message.contact.phone_number
        else:
            phone = message.text

        name = user_states[user_id]['name']
        db.add_user(user_id, name, phone)

        if user_id in user_states:
            del user_states[user_id]

        remove_keyboard = types.ReplyKeyboardRemove()

        welcome_text = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {name}!\n\n" \
                       f"üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n" \
                       f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"

        bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=remove_keyboard
        )
        show_main_menu(message.chat.id)

    except Exception as e:
        logger.error(f"Get phone error: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )


def show_main_menu(chat_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        bot.send_message(
            chat_id,
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=Keyboard.main_menu()
        )
    except Exception as e:
        logger.error(f"Show main menu error: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        if call.data == "mm":
            bot.edit_message_text(
                "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                chat_id,
                message_id,
                reply_markup=Keyboard.main_menu()
            )

        elif call.data == "products":
            products = db.get_all_products()
            if not products:
                bot.edit_message_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu()
                )
            else:
                bot.edit_message_text(
                    "üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.products_menu(products)
                )

        elif call.data.startswith("product_"):
            product_id = int(call.data.split("_")[1])
            product = db.get_exact_product(product_id)
            if product:
                name, price, description, photo = product
                text = f"üì¶ {name}\nüí∞ –¶–µ–Ω–∞: {price}—Å—É–º\nüìù {description}"
                bot.edit_message_text(
                    text,
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.product_detail(product_id)
                )

        elif call.data.startswith("add_to_cart_"):
            product_id = int(call.data.split("_")[3])
            product = db.get_exact_product(product_id)
            if product:
                name = product[0]
                db.add_to_cart(chat_id, product_id, name, 1)
                bot.answer_callback_query(call.id, f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
                products = db.get_all_products()
                bot.edit_message_text(
                    "üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.products_menu(products)
                )

        elif call.data == "cart":
            cart_items = db.get_user_cart(chat_id)
            if not cart_items:
                bot.edit_message_text(
                    "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.cart_menu(cart_items)
                )
            else:
                total = sum(item[2] for item in cart_items)
                cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
                for item in cart_items:
                    cart_text += f"‚Ä¢ {item[0]} x{item[1]} = {item[2]}—Å—É–º\n"
                cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Å—É–º"
                bot.edit_message_text(
                    cart_text,
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.cart_menu(cart_items)
                )

        elif call.data == "clear_cart":
            db.delete_user_cart(chat_id)
            bot.edit_message_text(
                "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
                chat_id,
                message_id,
                reply_markup=Keyboard.cart_menu([])
            )

        elif call.data == "order":
            cart_items = db.get_user_cart(chat_id)
            if cart_items:
                total = sum(item[2] for item in cart_items)
                if send_order_email(chat_id, cart_items, total):
                    db.delete_user_cart(chat_id)
                    bot.edit_message_text(
                        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {total}—Å—É–º —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                        chat_id,
                        message_id,
                        reply_markup=Keyboard.main_menu()
                    )
                else:
                    bot.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        chat_id,
                        message_id,
                        reply_markup=Keyboard.cart_menu(cart_items)
                    )

        elif call.data == "feedback":
            bot.edit_message_text(
                "üìù –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                chat_id,
                message_id
            )
            bot.register_next_step_handler(call.message, process_feedback)

        elif call.data == "support":
            bot.edit_message_text(
                "üîß –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 XX XXX XX XX\n"
                "‚úâÔ∏è Email: support@example.com\n\n"
                "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00",
                chat_id,
                message_id,
                reply_markup=Keyboard.main_menu()
            )

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Callback error: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def process_feedback(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    try:
        feedback_text = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n\n{message.text}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        msg = MIMEMultipart()
        msg['From'] = EMAIL_HOST_USER
        msg['To'] = EMAIL_RECIPIENT
        msg['Subject'] = f'–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{message.from_user.id}'
        msg.attach(MIMEText(feedback_text, 'plain'))

        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
            server.send_message(msg)

        bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=Keyboard.main_menu()
        )
    except Exception as e:
        logger.error(f"Feedback error: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboard.main_menu()
        )


if __name__ == "__main__":
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        db.add_test_products()
        logger.info("Bot started")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")