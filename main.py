import telebot
from telebot import types
from database import db
from buttons import Keyboard
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_TOKEN = '7919571616:AAHXJ3GSWxp4DnrpChOM79cxd9KAm-aTo4g'
bot = telebot.TeleBot(API_TOKEN)


EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = "camillakleymen@gmail.com"
EMAIL_HOST_PASSWORD = "zqrz tgqi zgpt yvyp"
EMAIL_RECIPIENT = "camillakleymen@gmail.com"


user_states = {}


def get_user_info(user_id):

    try:
        cursor = db.cursor
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone()
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        return None


def format_order_email(user_id, cart_items, total):

    user_info = get_user_info(user_id)
    if not user_info:
        return None

    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    message_text = f"""
    –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id}
    –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order_time}

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:
    - ID: {user_id}
    - –ò–º—è: {user_info[1]}
    - –¢–µ–ª–µ—Ñ–æ–Ω: {user_info[2]}

    –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
    """

    for item in cart_items:
        message_text += f"- {item[0]}: {item[1]} —à—Ç. √ó {item[2] / item[1]}—Å—É–º = {item[2]}—Å—É–º\n"

    message_text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}—Å—É–º"
    return message_text


def send_order_email(user_id, cart_items, total):

    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_HOST_USER
        msg['To'] = EMAIL_RECIPIENT
        msg['Subject'] = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id} –æ—Ç {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

        message_text = format_order_email(user_id, cart_items, total)
        if not message_text:
            logger.error(f"Failed to format email for user {user_id}")
            return False

        msg.attach(MIMEText(message_text, 'plain'))

        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
            server.send_message(msg)

        logger.info(f"Order email sent successfully for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to send order email: {e}")
        return False


@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        if not db.check_user(user_id):
            bot.send_message(
                message.chat.id,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            bot.register_next_step_handler(message, get_name)
        else:
            show_main_menu(message.chat.id)
    except Exception as e:
        logger.error(f"Start error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_name(message):
    try:
        user_id = message.from_user.id
        name = message.text.strip()

        if not name or len(name) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
            bot.register_next_step_handler(message, get_name)
            return

        user_states[user_id] = {"name": name}
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=Keyboard.get_phone_number()
        )
        bot.register_next_step_handler(message, get_phone)
    except Exception as e:
        logger.error(f"Name registration error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_phone(message):
    try:
        user_id = message.from_user.id
        if message.contact:
            phone = message.contact.phone_number
        else:
            phone = message.text.strip()

        if not phone:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            bot.register_next_step_handler(message, get_phone)
            return

        name = user_states[user_id]["name"]
        db.add_user(user_id, name, phone)

        bot.send_message(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {name}!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(message.chat.id)
    except Exception as e:
        logger.error(f"Phone registration error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_main_menu(chat_id):
    try:
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=Keyboard.main_menu()
        )
    except Exception as e:
        logger.error(f"Main menu error: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        user_id = call.message.chat.id

        if call.data == "products":
            show_products(call.message)
        elif call.data == "cart":
            show_cart(call.message)
        elif call.data == "mm":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            show_main_menu(call.message.chat.id)
        elif call.data == "clear_cart":
            clear_cart(call.message)
        elif call.data == "order":
            process_order(call.message)
        elif call.data.startswith("add_to_cart_"):
            product_id = int(call.data.split("_")[-1])
            add_to_cart(call.message, product_id)
        elif call.data == "back_to_products":
            show_products(call.message)
        elif call.data == "feedback":
            bot.send_message(call.message.chat.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif call.data == "support":
            bot.send_message(call.message.chat.id, "–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ email: support@example.com")

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Callback error: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_products(message):
    try:
        products = db.get_all_products()
        if not products:
            bot.edit_message_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                message.chat.id,
                message.message_id,
                reply_markup=Keyboard.main_menu()
            )
            return

        keyboard = types.InlineKeyboardMarkup(row_width=1)

        for product in products:
            product_id, name, price = product[0], product[1], product[2]
            button = types.InlineKeyboardButton(
                f"{name} - {price}—Å—É–º",
                callback_data=f"add_to_cart_{product_id}"
            )
            keyboard.add(button)

        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mm"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:",
            message.chat.id,
            message.message_id,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Show products error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.")


def add_to_cart(message, product_id):
    try:
        user_id = message.chat.id
        product = db.get_exact_product(product_id)

        if not product:
            bot.send_message(user_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        product_name, product_price = product[0], product[1]
        db.add_to_cart(user_id, product_id, product_name, 1)

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="products"),
            types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")
        )

        bot.send_message(
            user_id,
            f"‚úÖ {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Add to cart error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")


def show_cart(message):
    try:
        user_id = message.chat.id
        cart_items = db.get_user_cart(user_id)

        if not cart_items:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ö –ø–æ–∫—É–ø–∫–∞–º", callback_data="products"))
            bot.edit_message_text(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                user_id,
                message.message_id,
                reply_markup=keyboard
            )
            return

        total = sum(item[2] for item in cart_items)
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for item in cart_items:
            cart_text += f"‚Ä¢ {item[0]} x{item[1]} = {item[2]}—Å—É–º\n"
        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Å—É–º"

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order"),
            types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
            types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="products"),
            types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm")
        )

        bot.edit_message_text(
            cart_text,
            user_id,
            message.message_id,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Show cart error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã.")


def clear_cart(message):
    try:
        user_id = message.chat.id
        db.delete_user_cart(user_id)

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("–ö –ø–æ–∫—É–ø–∫–∞–º", callback_data="products"),
            types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm")
        )

        bot.edit_message_text(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
            user_id,
            message.message_id,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Clear cart error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.")


def process_order(message):
    try:
        user_id = message.chat.id
        cart_items = db.get_user_cart(user_id)

        if not cart_items:
            bot.edit_message_text(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
                user_id,
                message.message_id,
                reply_markup=Keyboard.main_menu()
            )
            return

        total = sum(item[2] for item in cart_items)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        email_sent = send_order_email(user_id, cart_items, total)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        db.delete_user_cart(user_id)

        success_message = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {total}—Å—É–º —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        if email_sent:
            success_message += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        success_message += "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

        bot.edit_message_text(
            success_message,
            user_id,
            message.message_id,
            reply_markup=Keyboard.main_menu()
        )
    except Exception as e:
        logger.error(f"Process order error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")


if __name__ == "__main__":
    try:
        logger.info("Bot started")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")